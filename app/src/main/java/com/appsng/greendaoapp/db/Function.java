package com.appsng.greendaoapp.db;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.appsng.greendaoapp.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "FUNCTION".
 */
@Entity(active = true)
public class Function {

    @Id
    private Long id;
    private Integer id_function;
    private String title_function;
    private String row_version;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient FunctionDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "id_function")
    })
    private List<Lesson> all_lesson;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Function() {
    }

    public Function(Long id) {
        this.id = id;
    }

    @Generated
    public Function(Long id, Integer id_function, String title_function, String row_version) {
        this.id = id;
        this.id_function = id_function;
        this.title_function = title_function;
        this.row_version = row_version;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFunctionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getId_function() {
        return id_function;
    }

    public void setId_function(Integer id_function) {
        this.id_function = id_function;
    }

    public String getTitle_function() {
        return title_function;
    }

    public void setTitle_function(String title_function) {
        this.title_function = title_function;
    }

    public String getRow_version() {
        return row_version;
    }

    public void setRow_version(String row_version) {
        this.row_version = row_version;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Lesson> getAll_lesson() {
        if (all_lesson == null) {
            __throwIfDetached();
            LessonDao targetDao = daoSession.getLessonDao();
            List<Lesson> all_lessonNew = targetDao._queryFunction_All_lesson(id);
            synchronized (this) {
                if(all_lesson == null) {
                    all_lesson = all_lessonNew;
                }
            }
        }
        return all_lesson;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetAll_lesson() {
        all_lesson = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
